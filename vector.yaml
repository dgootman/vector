enrichment_tables:
  geoip_table:
    type: geoip
    path: /etc/vector/geoip/GeoLite2-City.mmdb

sources:

  traefik:
    type: file
    include:
      - /hostfs/var/log/traefik/access.jsonl

  logs:
    type: file
    include:
      - /hostfs/var/log/**/auth*.log
      - /hostfs/var/log/**/sys*.log

  host_metrics:
    type: host_metrics
    collectors: [
      # "cgroups",
      "cpu",
      "disk",
      "filesystem",
      "load",
      "host",
      "memory",
      "network"
    ]
    filesystem:
      devices:
        includes:
          - /dev/*
      mountpoints:
        includes:
          - /hostfs*

  prometheus_scrape_metrics:
    type: prometheus_scrape
    endpoints:
      - http://localhost:8080/metrics # traefik
      - http://localhost:9156/metrics # docker-exporter
      - http://localhost:9256/metrics # process-exporter


transforms:

  traefik_parser:
    type: remap
    inputs:
      - traefik
    source: |-
      traefik = object!(parse_json!(string!(.message)))

      .timestamp = parse_timestamp!(traefik.StartUTC, "%+")
      .level = traefik.level

      status_code = int!(traefik.DownstreamStatus)

      .event.kind = "event"
      .event.category = ["network", "web"]
      .event.kind = ["access"]
      if 200 <= status_code && status_code < 400 {
        .event.outcome = "success"
      } else {
        .event.outcome = "failure"
      }
      .event.duration = traefik.Duration

      .log.file.path = .file
      .log.level = traefik.level

      .http.request.body.bytes = traefik.RequestContentSize
      .http.request.method = traefik.RequestMethod
      .http.response.body.bytes = traefik.DownstreamContentSize
      .http.response.status_code = status_code
      .http.version = traefik.RequestProtocol

      .url.domain = traefik.RequestHost
      .url.path = traefik.RequestPath
      .url.scheme = traefik.RequestScheme
      if traefik.RequestPort != null && traefik.RequestPort != "-" {
        .url.port = to_int!(traefik.RequestPort)
      }

      user_name = traefik.ClientUsername
      if user_name != null && user_name != "-" {
        .user.name = user_name
      }

      .user_agent.original = traefik."request_User-Agent"

      .source.address = traefik.ClientAddr
      .source.ip = traefik.ClientHost
      .source.port = traefik.ClientPort

      if .source.ip != null {
        if !includes(["127.0.0.1", "::1"], .source.ip) {
          # Use the GeoIP database to identify the IP's location
          # Populate the Geo object following the Elastic Common Schema specification
          # https://www.elastic.co/guide/en/ecs/current/ecs-geo.html
          .source.geo, .source.geo_error = get_enrichment_table_record("geoip_table", {"ip": .source.ip})

          if .source.geo_error != null {
            log(.source.geo_error, level: "error")
          } else {
            # Remap fields to conform to ECS specification
            .source.geo.country_iso_code = del(.source.geo.country_code)
            .source.geo.region_iso_code = del(.source.geo.region_code)
            .source.geo.location.lon = del(.source.geo.longitude)
            .source.geo.location.lat = del(.source.geo.latitude)
          }
        }
      }

      .tls.cipher = traefik.TLSCipher
      .tls.version = traefik.TLSVersion

      .traefik.service = traefik.RouterName

  syslog:
    type: remap
    inputs:
      - logs
    source: |-
      . |= parse_syslog!(.message)

      # Try to parse username from the log
      # Populate the User object following the Elastic Common Schema specification
      # https://www.elastic.co/guide/en/ecs/current/ecs-user.html
      .user = parse_regex(.message, r'\buser (?P<name>\w+)') ?? {}

      # Try to parse an ip address from the log
      # Populate the Source object following the Elastic Common Schema specification
      # https://www.elastic.co/guide/en/ecs/current/ecs-source.html
      .source = parse_regex(.message, r'\b(?P<ip>(?:[0-9]{1,3}\.){3}[0-9]{1,3})\b') ?? {}

      if .source.ip != null {
        .source.address = .source.ip

        if !includes(["127.0.0.1", "::1"], .source.ip) {
          # Use the GeoIP database to identify the IP's location
          # Populate the Geo object following the Elastic Common Schema specification
          # https://www.elastic.co/guide/en/ecs/current/ecs-geo.html
          .source.geo, .source.geo_error = get_enrichment_table_record("geoip_table", {"ip": .source.ip})

          if .source.geo_error != null {
            log(.source.geo_error, level: "error")
          } else {
            # Remap fields to conform to ECS specification
            .source.geo.country_iso_code = del(.source.geo.country_code)
            .source.geo.region_iso_code = del(.source.geo.region_code)
            .source.geo.location.lon = del(.source.geo.longitude)
            .source.geo.location.lat = del(.source.geo.latitude)
          }
        }
      }

      . = compact(.)

  metrics_tagger:
    type: remap
    inputs:
      - "*_metrics"
    source: |-
      .tags.job = "vector"
      .tags.instance = "${HOSTNAME?}"

  metrics_filter:
    type: filter
    inputs:
      - metrics_tagger
    condition: >-
      !starts_with!(.name, "namedprocess_") || includes(["namedprocess_namegroup_cpu_seconds_total", "namedprocess_namegroup_memory_bytes"], .name)

sinks:

  # console:
  #   type: console
  #   inputs:
  #     - "*"
  #   encoding:
  #     codec: json

  # Documentation: https://vector.dev/docs/reference/configuration/sinks/loki/
  loki:
    type: loki
    endpoint: "${LOKI_ENDPOINT?}"
    auth:
      strategy: basic
      user: "${LOKI_USER?}"
      password: "${LOKI_PASSWORD?}"
    encoding:
      codec: json
    out_of_order_action: accept
    labels:
      job: vector
      instance: "${HOSTNAME?}"
      file: "{{.file}}"
    inputs:
      - traefik_parser
      - syslog

  # Documentation: https://vector.dev/docs/reference/configuration/sinks/prometheus_remote_write/
  prometheus:
    type: prometheus_remote_write
    endpoint: "${PROMETHEUS_ENDPOINT?}"
    auth:
      strategy: basic
      user: "${PROMETHEUS_USER?}"
      password: "${PROMETHEUS_PASSWORD?}"
    inputs:
      - metrics_filter
