enrichment_tables:
  geoip_table:
    type: geoip
    path: /etc/vector/geoip/GeoLite2-City.mmdb

sources:

  traefik:
    type: file
    include:
      - /hostfs/var/log/traefik/access.jsonl

  logs:
    type: file
    ignore_older_secs: 600
    include:
      - /hostfs/var/log/**/auth*.log
      - /hostfs/var/log/**/sys*.log
    read_from: end

  host_metrics:
    type: host_metrics
    collectors: [
      # "cgroups",
      "cpu",
      "disk",
      "filesystem",
      "load",
      "host",
      "memory",
      "network"
    ]
    filesystem:
      devices:
        includes:
          - /dev/*
      mountpoints:
        includes:
          - /hostfs*

  prometheus_scrape_metrics:
    type: prometheus_scrape
    endpoints:
      - http://localhost:8080/metrics # traefik
      - http://localhost:9091/metrics # docker-exporter
      - http://localhost:9256/metrics # process-exporter


transforms:

  traefik_parser:
    type: remap
    inputs:
      - traefik
    source: |-
      . |= object!(parse_json!(string!(.message)))

      .timestamp = parse_timestamp!(.StartUTC, "%+")

      if !includes(["127.0.0.1", "::1"], .ClientHost) {
        .GeoIP = get_enrichment_table_record!("geoip_table",
          {
            "ip": .ClientHost
          }
        )
      }

  syslog:
    type: remap
    inputs:
      - logs
    source: |-
      . |= parse_syslog!(.message)

  metrics_tagger:
    type: remap
    inputs:
      - "*_metrics"
    source: |-
      .tags.job = "vector"
      .tags.instance = "${HOSTNAME?}"

  metrics_filter:
    type: filter
    inputs:
      - metrics_tagger
    condition: >-
      !starts_with!(.name, "namedprocess_") || includes(["namedprocess_namegroup_cpu_seconds_total", "namedprocess_namegroup_memory_bytes"], .name)

sinks:

  # console:
  #   type: console
  #   inputs:
  #     - "*"
  #   encoding:
  #     codec: json

  loki:
    type: loki
    endpoint: "${LOKI_ENDPOINT?}"
    auth:
      strategy: basic
      user: "${LOKI_USER?}"
      password: "${LOKI_PASSWORD?}"
    encoding:
      codec: json
    labels:
      job: vector
      instance: "${HOSTNAME?}"
      file: "{{.file}}"
    inputs:
      - traefik_parser
      - syslog

  prometheus:
    type: prometheus_remote_write
    endpoint: "${PROMETHEUS_ENDPOINT?}"
    auth:
      strategy: basic
      user: "${PROMETHEUS_USER?}"
      password: "${PROMETHEUS_PASSWORD?}"
    inputs:
      - metrics_filter
